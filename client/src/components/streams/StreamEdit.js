import React from 'react';
import {connect} from 'react-redux';
import {fetchStream, editStream} from '../../actions';
import StreamForm from './StreamForm';
import _ from 'lodash';
//with react-router, each component needs to be designed to work in isolation(fetch its own data!)

//The props that is passed into this is from react-router-dom
//we only see this because StreamEdit is being rendered by a Route component
//which automatically sends the component these props
//history, location and match are passed in
//we see in match->params->id the stream id because thats what we called it in the tag where we defined streams/edit/:id
class StreamEdit extends React.Component{
    componentDidMount(){
        this.props.fetchStream(this.props.match.params.id);
    }

    onSubmit = (formValues) =>{
        //console.log(formValues);
        this.props.editStream(this.props.match.params.id, formValues);
    }

    render(){
        //console.log(this.props);

        if(!this.props.stream){
            return <div>Loading...</div>
        }
        return(
            <div>
                <h3>Edit a Stream</h3>
                {/* initialValues is a special prop for redux forms, StreamForm is wrapped by the redux form helper and it
                sees the prop of initial values, it sees that its an object with a title and description property, so when
                the streamForm is renderred we have a field with a title and a field with description, so these are used as the
                initialvalues for field number one and two*/}
                <StreamForm 
                initialValues={_.pick(this.props.stream, 'title', 'description')} 
                onSubmit={this.onSubmit}/>
            </div>
        );
    }
}

const mapStateToProps = (state, ownProps) =>{
    //console.log(ownProps);

    /* own Props:
    You may define the function with a second argument, ownProps, if your component needs the data from its own props to retrieve data
     from the store. This argument will contain all of the props given to the wrapper component that was generated by connect. */

    //this will select the appropriate stream out of hte object that contains all of our streams inside our redux store
    return {stream: state.streams[ownProps.match.params.id]};
}

export default connect(mapStateToProps, {fetchStream, editStream})(StreamEdit);
